{
  "addExpiresOrCacheControlHeaders": {
    "title": "Add Expires or Cache-Control HTTP Headers",
    "description": "You should reach 100% of resources cached.",
    "correction": "<div class='correction-text'>The Expires and Cache-Control headers determine how long a browser should keep a resource in its cache. You should therefore use them, and configure them correctly for CSS style sheets, JavaScript scripts and images.<br><br>Ideally, these elements should be kept as long as possible so that the browser does not request them again from the server. This saves HTTP requests, bandwidth and CPU power server-side.<br><br> 1. Reduced Server Load: When Expires or Cache-Control headers are set, web browsers and intermediate caches store a copy of the website's resources locally. This means that subsequent visits or requests for the same resources can be fulfilled from the cache instead of hitting the web server every time. As a result, the server experiences reduced load and consumes less energy, contributing to overall resource efficiency. <br><br> 2.Faster Page Load Times: Cached resources are served faster because they don't need to be fetched from the server each time. This leads to quicker page load times, which enhances user experience and encourages users to spend more time on the website. Faster load times also save energy for users who access the website from battery-powered devices like laptops and smartphones. <br><br> 3.Lower Bandwidth Usage: By caching resources on the client side, there is a reduced need for data transfer between the server and the client. This leads to lower bandwidth consumption, which is particularly important for users with limited data plans or in regions with less robust internet infrastructure. <br><br> 4.Efficient Use of Data Centers: Data centers, which host websites and web applications, consume significant amounts of energy. By reducing the number of requests to the data center through caching, there is a decrease in energy consumption and carbon emissions associated with data center operations. <br><br> 5.Sustainable Browsing: Cached resources allow users to browse the web more sustainably. When users access a website with appropriate cache control headers, their devices download fewer resources, leading to reduced energy usage for their devices and a lower environmental impact associated with their online activities. <br><br> Here is a configuration example for Expires and Cache-Control headers for the Apache web server:<br><br> <pre>&lt;IfModule mod_headers.c></pre><pre>   &nbsp;&lt;FilesMatch &quot&#92.(ico|jpe?g|png|gif|swf|css|gz)$&quot></pre><div><pre>        Header set Cache-Control &quotmax-age=2592000, public&quot</pre><pre>    &lt;/FilesMatch></pre><pre>    &lt;FilesMatch  &quot&#92.(html|htm)$&quot></pre><pre>       Header set Cache-Control &quotmax-age=7200, public&quot</pre><pre>    &lt;/FilesMatch></pre><pre> <br>&lt;/IfModule></pre><br><br> For example, if you use an Apache server, you can use the mod_expires module or the Header directive in your .htaccess. If you use WordPress, you can install a plugin like WP Rocket that automatically adds these headers for you. If you're using custom code to serve your website, you can add Expires or Cache-Control headers directly in your server-side code. <br><br>  Government Regulation:<br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/6.3/'>RGESN 6.3 : Does the digital service use caching mechanisms for all transferable content that it has control over?</a><br>Best practices n°75 from 115 bonnes pratiques d'écoconception web v4<br><br> See :<br><a target='_blank' href='http://www.ecometer.org/rules/cache-headers.html'>Cache Header</a><br><a target='_blank' href='https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Cache-Control'>Cache-Control Headers</a><br><a target='_blank' href='https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires'>Expires Headers</a> </div>",
    "titleData": "{0}% of resources cached"
  },
  "compressHttp": {
    "title": "Compress ressources",
    "description": "To get an A score, reach 100 % of compression ratio.",
    "correction": "<div class='correction-text'>You can compress the content of HTML pages to minimize bandwidth consumption between the client and the server. <br><br> 1.Reduced Data Transfer: Compressed resources are smaller in size, resulting in reduced data transfer between web servers and clients (such as web browsers). This reduction in data transfer translates to lower bandwidth consumption, which is crucial in regions with limited internet infrastructure and for users on mobile devices with data limitations. Ultimately, less data transfer means lower energy consumption and a smaller carbon footprint associated with internet usage. <br><br> 2.Faster Page Load Times: Smaller resource sizes lead to faster download times for website visitors. Quicker loading times enhance user experience, increase user satisfaction, and encourage users to spend more time on the website. Faster page loads also save energy for users accessing the website from battery-powered devices, as their devices can enter low-power states sooner. <br><br>3.Optimized Server Performance: Compressed resources reduce the load on web servers. Smaller file sizes mean servers can deliver content more efficiently to multiple users simultaneously. This optimization can lead to a reduced need for server infrastructure and lower energy consumption associated with server operations. <br><br>4.Efficient Data Center Operations: Data centers, which host websites and web applications, consume substantial amounts of energy. By compressing resources, the volume of data transmitted to and from data centers is reduced, contributing to more efficient data center operations and a smaller environmental impact. <br><br>  All modern browsers (for smartphones, tablets, notebook and desktop computers) accept HTML compressed via gzip or Deflate. The easiest way to do so is to configure the web server so that it compresses the HTML data stream, either on-the-fly or automatically, as it leaves the server. This practice (on-the-fly compression) is only beneficial for a HTML data stream as it is constantly evolving. When possible, we recommend that you manually compress static resources (e.g. CSS and JavaScript libraries) all in one go.<br><br> With Apache, the Deflate and gzip compression methods offer considerable savings. A typical 26 KB HTML file is reduced to 6 KB after being compressed with gzip.<br><br><a target='_blank' href=https://www.npmjs.com/package/gzipper>If your frontend framework is one of the following: React / Angular / Vue.js</a> <br> <br> <a target='_blank' href='https://www.npmjs.com/package/compress-create-react-app'>If your front-end framework is React</a> <br><br>Government Regulation;<br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/6.4/'>RGESN 6.4 : Has the digital service implemented compression techniques for all transferable resources that it has control over?</a><br>Best practices n°76 from 115 bonnes pratiques d'écoconception web v4<br><br> See : <br> <a target='_blank' href='http://www.ecometer.org/rules/http-compress.html'> Http Compress </a><br><a target='_blank' href='https://serpstat.com/blog/how-to-compress-html-code-to-reach-better-website-loading-speed/'>How to compress HTML code ?</a></div>",
    "titleData": "{0}% of resources compressed"
  },
  "domainsNumber": {
    "title": "Limit the number of domains",
    "description": "You should limit the number of domains to 3 per page.",
    "correction": "<div class='correction-text'> When a website or online service hosts a web page’s components across several domains, the browser must establish an HTTP connection with every single one. Once the HTML page has been retrieved, the browser calls the sources as it traverses the DOM (Document Object Model). <br><br> Some resources are essential for the page to work. If they are hosted on another domain which is slow, it may increase the page’s render time. You should therefore, when possible, group all resources on a single domain. <br><br>The only exception to this is for static resources (style sheets, images, etc.), which should be hosted on a separate domain to avoid sending one or multiple cookies for each browser GET HTTP request. This reduces response time and unnecessary bandwidth consumption. <br><br>For a corporate website with heavy traffic, it is better to have two domains: - the application server at www.domain.tld - the cookieless media server at media.domain.tld By doing so, you minimize the number of domains while also avoiding unnecessarily sending a cookie for each GET HTTP request for a static resource.<br><br>Government Regulation;<br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/6.10/'>RGESN 6.10 : Does the digital service restrict the usage of user terminal sensors to only when needed by the service rather than continuously?</a><br><br> Best practices n°82 from '115 bonnes pratiques d'écoconception web v4' <br><br>See : <br> <a target='_blank' href=https://www.wpbeginner.com/beginners-guide/beginners-guide-what-is-a-domain-name-and-how-do-domains-work/>What is a domain number and how does it works</a> <br> <a target ='_blank' href=http://www.ecometer.org/rules/minimize-number-of-domains.html> Minimize the number of domains </a> </div>",
    "titleData": "{0} domain(s) found per page in average"
  },
  "dontResizeImageInBrowser": {
    "title": "Don't resize image in browser",
    "description": "There should be no image resized in browser in your web application. You are resizing an image if you are using the attributes HEIGHT and WIDTH in the HTML tag of the image.",
    "correction": "<div class='correction-text'>Do not resize images using HTML height and width attributes. Doing so sends images in their original size, wasting bandwidth and CPU power. A PNG-24 350 x 300 px image is 41 KB. If you resized the same image file using HTML and displayed it as a 70 x 60 px thumbnail, it would still be 41 KB, when it should be no more than 3 KB! Meaning 38 KB downloaded for nothing. The best solution is to resize images using software such as Photoshop, without using HTML. When content added by the website’s users has no specific added value, it is best to prevent them from being able to insert images using a WYSIWYG editor e.g., CKEditor. <br><br> </div><div class=\"compliance-title\">Non Compliant : </div><br/><div class=\"compliance-example\">&lt;img src={LoadingIconPath} alt=”loading icon”  width = 12px\" height = \"12px\" \/></div><div class=\"compliance-title\">Compliant : </div><br/><div class=\"compliance-example\">&lt;img  src={LoadingIconPath} alt=”loading icon”  /></div><br><br>Government Regulation;<br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/5.2/'>RGESN 5.2 Does the digital service offer image content whose level of compression is appropriate for the content and viewing context?</a><br><br>See : <br> <a target='_blank' href='http://www.ecometer.org/rules/dont-resize-image-in-browser.html'> How to resize image outside the browser</a> </div>",
    "titleData": "{0} image(s) resized in browser found in the whole project"
  },
  "emptySrcTag": {
    "title": "Avoid empty src tag",
    "description": "You should have no empty src tags.",
    "correction": "<div class='correction-text'>If there is an image tag with an empty src attribute, the browser will call the directory in which the page is located, generating unnecessary, additional HTTP requests.<br><br>The following image tag will request the foo directory’s index file from the server:<br><br><pre>&lt;img src=&quot&quot alt=&quot&quot></pre><br>for a page located at: http://domain.tld/foo/bar.html<br><br>See : <br> <a target='_blank' href='http://www.ecometer.org/rules/empty-src.html'>Delete image tags with empty src attributes</a></div>",
    "titleData": "{0} empty src tags found in the whole project"
  },
  "externalizeCss": {
    "title": "Externalize css",
    "description": "You should reach 0 inline stylesheets.",
    "correction": "<div class='correction-text'>Ensure that CSS files and JavaScript code are separate from the page’s HTML code, except for any configuration variables for JavaScript objects. <br><br>  If you include CSS or JavaScript code in the body of the HTML file, and it is used for several pages (or even the whole website), then the code must be sent for each page requested by the user, therefore increasing the volume of data sent.<br><br>  However, if the CSS and JavaScript code are in their own separate files, the browser can avoid requesting them again by storing them in its local cache.<br/><br/> 1.Modularity and Reusability: External CSS allows developers to reuse styles across multiple pages or sections of a website. When styles are centralized in external files, changes and updates can be applied universally, reducing the need for duplicate code. This modularity promotes efficient code organization and reduces the overall size of the HTML documents, resulting in more sustainable and maintainable codebases. <br/><br/> 2.Reduced Page Size: Externalizing CSS reduces the size of individual HTML pages. When CSS is embedded within the HTML document, it increases the file size, leading to more data transfer between the server and the browser. Smaller page sizes result in reduced bandwidth consumption, faster page load times, and a smaller carbon footprint associated with data transmission. <br/><br/> 3.Browser Caching Efficiency: External CSS files are more likely to be cached by web browsers and intermediate caches (like proxy servers). Cached CSS files can be reused across multiple pages, reducing the need for redundant resource downloads and contributing to faster page loads and reduced server load. <br/><br/> 4.Improved Maintainability: Separating CSS into external files makes it easier to manage and maintain the website's styles. Developers can work on the CSS files independently of the HTML content, promoting more efficient workflows and ensuring that style updates can be applied consistently across the entire website. Optimized Server Performance: External CSS reduces the size of HTML documents, leading to less data to transfer from the server to the client. This optimization results in improved server performance, reduced server load, and energy savings associated with data transmission. <br/><br/> 5.Mobile Data Efficiency: Smaller HTML page sizes resulting from externalized CSS consume less data, which is particularly beneficial for users accessing websites on mobile devices with limited data plans. Reducing data usage on mobile devices contributes to a more eco-friendly browsing experience. <div class=\"compliance-title\">Non compliant :</div><div class=\"compliance-example\">&lt;style type=\"text/css\" media=\"screen\"><br>    p { color: #333, margin: 2px 0 }<br>/* All the website's CSS declarations */   <br> &lt;/style>    <br/></div></div><div class=\"compliance-title\">    Compliant :</div><div class=\"compliance-example\"><div class=\"\"description\"\">&lt;link href=\"css/styles.css\" rel=\"stylesheet\"><br><br></div></div><br><br>Best practices n°42 from '115 bonnes pratiques d'écoconception web v4'<br><br>  See : <br><a target='_blank' href='http://www.ecometer.org/rules/externalize-css-and-js.html'> Externalize CSS files</a><br><a target='_blank' href='https://www.webucator.com/article/how-to-create-a-css-external-style-sheet/'> How to create a css external stylesheet</a></div>",
    "titleData": "{0} inline stylesheet(s) found in the whole project"
  },
  "externalizeJs": {
    "title": "Externalize js",
    "description": "You should have no inline JavaScript script in HTML code.",
    "correction": "<div class='correction-text'>Ensure that JavaScript code is separate from the page’s HTML code, except for any configuration variables for JavaScript objects. If you include JavaScript code in the body of the HTML file, and it is used for several pages (or even the whole website), then the code must be sent for each page requested by the user, therefore increasing the volume of data sent. However, if the JavaScript code is in his own separate file, the browser can avoid requesting them again by storing them in its local cache.</div>    <div class=\"compliance-title\">Non Compliant : </div>  <div class=\"compliance-example\">File 1<br/><br/> Avoid using script directly into HTML : <br/><ul><li>&lt;script type=\"\"text\/javascript\"\"><br/> alert(\"\"Hello Jean ! \"\")<br/>  &lt;\/script></li><li>&ltbutton onclick=alert('Hello Jeanne')><br/>Say Hello Jeanne<br/>&lt;/button><br/></li>  <br/></div><div class=\"compliance-title\">Compliant :</div> <div class=\"compliance-example\">Instead use a JavaScript file where the function is defined : <ul><li>script: <br/>function sayHello(name) {<br/>      alert(\"\"Hello\"\" + name +\"\" ! \"\")<br/>}</li><li>&lt;script type=\"\"text\/javascript\"\"><br/>sayHello(Jean)<br/>&lt;\/script><br/></li></div><br><div class='correction-text'><br><br>Best practices n°42 from '115 bonnes pratiques d'écoconception web v4'<br><br>See : <br> <a target='_blank' href='http://www.ecometer.org/rules/externalize-css-and-js.html'>Externalize JS Files</a><br><a target='_blank' href='https://www.javatpoint.com/external-javascript-file'>Externalize JavaScript Files</a>",
    "titleData": "{0} inline javascripts found in the whole project"
  },
  "httpError": {
    "title": "Avoid HTTP request errors",
    "description": "You should not have HTTP errors when loading your pages.",
    "correction": "<div class='correction-text'>Requests with HTTP errors consume resources unnecessarily.<br><br> 1.User Experience (UX): HTTP errors, such as the commonly encountered 404 Not Found or 500 Internal Server Error, disrupt the user experience. When users encounter these errors, it can lead to frustration, confusion, and a negative perception of the website or service. By avoiding HTTP errors, you contribute to a smoother and more pleasant user experience, enhancing user satisfaction and retention. <br><br>2.Efficiency and Resource Conservation: When a web server returns an HTTP error, it consumes resources and bandwidth. Frequent errors can lead to unnecessary strain on the server infrastructure, resulting in higher energy consumption and potentially increased carbon footprint. By minimizing HTTP errors, you optimize server performance and contribute to resource conservation. <br><br>3.Reduced Data Transfer: HTTP errors generate additional data traffic as the server responds with error messages. Reducing the occurrence of errors helps decrease data transfer, which is particularly relevant for users with limited data plans or in regions with less robust internet infrastructure. <br><br>4.SEO and Organic Traffic: Frequent HTTP errors can negatively impact a website's search engine rankings and organic traffic. Search engines may penalize sites that consistently return errors, leading to lower visibility and reduced traffic. By avoiding errors, you improve your website's chances of ranking higher in search results, potentially attracting more visitors and minimizing the need for additional advertising efforts. <br><br>Best practices n°89 from '115 bonnes pratiques d'écoconception web v4'<br><br> See : <br><a target='_blank' href='https://www.geeksforgeeks.org/how-to-troubleshoot-common-http-error-codes/'>How to troubleshoot common http error code</a></div>",
    "titleData": "{0} HTTP error(s) in the whole project"
  },
  "httpRequests": {
    "title": "Limit the number of HTTP requests",
    "description": "A page’s download time client-side directly correlates to the number and size of files the browser must download. You should not have more than 25 requests to load one page of your application.",
    "correction": "<div class='correction-text'>For each file, the browser sends a GET HTTP to the server. It waits for the response, and then downloads the resource as soon as it is available. Depending on the type of web server you use, the more requests per page there are, the fewer pages the server can handle. Reducing the number of requests per page is key to reducing the number of HTTP servers needed to run the website, and consequently its environmental impact.<br><br>There are several ways to reduce the number of requests per page: <ul><li>- Combine static files e.g., CSS and JavaScript libraries</li><li> - Use a CSS sprite to group the interface’s images </li> <li>- Favor glyphs over images and, in general, vectors over bitmaps. </li><li>- Fill in the browser cache as much as possible.</li></ul><br><br>Potential saving: reduced server load, thus minimizing the economic and environmental footprint by reducing the amount of equipment needed (from HTTP servers to application servers and RDBMS).<br><br>Best practices n°47 from '115 bonnes pratiques d'écoconception web v4'<br><br>Government Regulation:<br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/6.2/'>RGESN 6.2 : Does the digital service have a limit of requests per screen?</a><br>Best practices n°47 from 115 bonnes pratiques d'écoconception web v4<br><br><br>See :<br><a target='_blank' href='http://www.ecometer.org/rules/limit-http-requests.html'>Limit HTTP Requests</a></div>",
    "titleData": "{0} HTTP request(s) on average"
  },
  "imageDownloadedNotDisplayed": {
    "title": "Do not download unecessary image",
    "description": "You should not request images from the server if they are not going to be displayed in your web application.",
    "correction": "<div class='correction-text'>Downloading images that will not necessarily be visible consumes resources unnecessarily. For example, images that are displayed only after a user action.<br><br>Government Regulation:<br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/5.2/'>RGESN 5.2 Does the digital service offer image content whose level of compression is appropriate for the content and viewing context?</a></div>",
    "titleData": "{0} image(s) downloaded but not displayed in the whole project"
  },
  "jsValidate": {
    "title": "Validate js",
    "description": "You shouldn’t have JavaScript errors when launching your web application.",
    "correction": "<div class='correction-text'>JSLint is a JavaScript code quality tool that checks that the JavaScript syntax used will be understood by all browsers. The code produced thus complies with coding rules which enables interpreters to quickly and easily run the code. The CPU is therefore used for a shorter time.<br><br><ul><li>Install eslint to analyse your code</li>   <br/><li>npm install eslint --save-dev or yarn add -D eslint</li><br/><li>Once installed, you can launch eslint project configuration<br/> npx eslint --init</li><br/><li>The command prompt will guide you through the linter configuration adapted to your projet. The file name .eslintrc defines the linter configuration and can be modified according to your requirement.</li><br/><li>To launch the linter analysis :<br/> eslint --ext .js .</li><br/><li>To let the linter fix issues automatically :<br/>eslint --fix --ext .js .</li></ul><br><br>Best practices n°43 from '115 bonnes pratiques d'écoconception web v4'<br><br>See :<br><a target='_blank' href='http://www.ecometer.org/rules/validate-js.html'>Check JavaScript code</a></div>",
    "titleData": "{0} JavaScript error(s) found in the whole project"
  },
  "maxCookiesLength": {
    "title": "Max cookies length",
    "description": "Maximum size of your cookies should be the smallest possible as it is sent with each request. Your cookies should not be longer than 512 bytes.",
    "correction": "<div class='correction-text'>A cookie makes it possible to maintain a state between the internet user's browser and the remote web server thanks to identifiers. This text file is transferred in each http request. It is therefore necessary to optimize its size as much as possible and delete it as soon as its presence is no longer mandatory.<br><br>    You can automatically delete a cookie when it is no longer useful, by specifying an expiry date, as follows:<br><br>    Set-Cookie: user_myvariable=myvalue; expires=Wed, 12 Dec 2012 07:40:20 UTC<br><br>Best practices n°62 from 115 bonnes pratiques d'écoconception web v4<br><br>    See :<br>    <a target='_blank' href='https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies'>Using HTTP cookies</a>    </div>",
    "titleData": "Max cookies length = {0} Bytes, in the whole project"
  },
  "minifiedCss": {
    "title": "Minified css",
    "description": "You should reach 100% of your CSS files minified.",
    "correction": "<div class='correction-text'>Minified CSS files are smaller in size, leading to reduced data transfer between the server and the client. Smaller file sizes mean lower bandwidth consumption, resulting in decreased carbon emissions associated with data transmission and more sustainable use of resources. <br><br> You can manually minify your CSS files by removing all comments from CSS code or removing any whitespace. Otherwise, you can use automated tools to do that for example CSS Minifier, Minify CSS or Yahoo’s YUI Compressor specialized filters to :<br>- remove comments and white spaces <br>- remove the last semi-colon <br>- remove extra semi-colons <br> - remove empty declarations <br> - remove units of measure when using 0 values and reduce multiple 0s into one <br>- remove 0 for values less than 1 <br> - convert RGB colors into hex values and reduce 6-digit hex values to 3-digit values <br>- remove extra charsets <br>- optimize the alpha layer’s opacity values in Internet Explorer <br> - replace none with 0<br><br> CSS Preprocessors such Sass or Less often provide built-in ways to compile and minify CSS during the compilation process.<br><br>Government Regulation: <br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/6.4/'>RGESN 6.4 : Has the digital service implemented compression techniques on all transferred resources under its control?</a><br><br>Best practices n°77 from 115 bonnes pratiques d'écoconception web v4<br><br> See : <br><a target='_blank' href='http://www.ecometer.org/rules/css-minification.html'>CSS Minification</a> </div>",
    "titleData": "{0}% of minified stylesheet"
  },
  "minifiedJs": {
    "title": "Minified js",
    "description": "You should reach 100% of your JS files minified.",
    "correction": "<div class='correction-text'>Minified CSS files are smaller in size, leading to reduced data transfer between the server and the client. Smaller file sizes mean lower bandwidth consumption, resulting in decreased carbon emissions associated with data transmission and more sustainable use of resources. <br><br> You can manually minify your CSS files by removing all comments from CSS code or removing any whitespace. Otherwise, you can use automated tools such JavaScript Minifier or UglifyJS or YUI Compressor to :<br><ul>- remove unnecessary white spaces</ul> <ul> - remove unnecessary line breaks</ul> <ul>- remove unnecessary semi-colons</ul> <ul>- shorten local variable names</ul> <br><br> This operation can be automated using <a target='_blank' href='https://developers.google.com/speed/pagespeed/module'>Google Apache speed module</a><br>A standard 248 KB JavaScript file will be 97KB after being minified<br><br> JavaScript bundlers such as Webpack or Rollup provide built-in or plugin-based minification features.<br><br>Government Regulation: <br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/6.4/'>RGESN 6.4 : Has the digital service implemented compression techniques on all transferred resources under its control?</a><br><br>Best practices n°77 from 115 bonnes pratiques d'écoconception web v4<br><br>See : <br><a target='_blank' href='http://www.ecometer.org/rules/javascript-minification.html'> JavaScript minification</a> </div>",
    "titleData": "{0}% of minified JavaScript"
  },
  "noCookieForStaticRessources": {
    "title": "No cookie for static ressources",
    "description": "You should have 0 static resources with cookies.",
    "correction": "<div class='correction-text'>Images, CSS stylesheets, and JavaScript files must be hosted on a cookie-free domain. This prevents the browser from sending a cookie for each resource ... when it is unnecessary. Indeed, although transferred in each http request, the cookie is useless for static content, since it is used to maintain a state between the Internet user's browser and the remote application server thanks to the identifiers contained in the text file..<br><br> It is therefore preferable to store this type of content on a specific domain name, for example static.domainname.com. For static resources, a cookie is unnecessary, so it unnecessarily consumes bandwidth. To avoid this, we can use a different domain for static resources or restrict the scope of cookies created. <br><br>Web Giants are using a dedicated domain to serve static ressources which does not require cookies. For example, Yahoo! uses the domain called yimg.com, Youtube ytimg.com and Amaon images-amazon.com<br><br>Government Regulation: <br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/6.11/'> RGESN 6.11 : Does the digital service host the transferred static resources of which it is the issuer on the same domain?</a><br><br>Best practices n°81 from 115 bonnes pratiques d'écoconception web v4<br><br>See : <br><a target='_blank' href='https://gtmetrix.com/serve-static-content-from-a-cookieless-domain.html'>Serve static content from a cookieless domain</a><br><a target='_blank' href='https://blog.leaseweb.com/2014/06/05/need-cookie-less-domain/'>Why do you need a cookie-less domain</a></div>",
    "titleData": "{0} static ressource(s) with cookie in the whole project"
  },
  "noRedirect": {
    "title": "Avoid redirect",
    "description": "Redirections should be avoided as much as possible as they slow down response and drain resources unnecessarily.",
    "correction": "<div class='correction-text'>Each redirection consumes network bandwidth and server resources. By minimizing redirections, the overall resource usage can be reduced, leading to a more sustainable design that conserves resources.<br><br> To avoid redirections, you can : <br>- Choose the right URL structure <br> - Use relative URLs <br> - Update Internal Links <br> - Use canonical URLs <br> - Avoid Chain Redirections  <br> - Avoid trailing slashes vs non-trailing slashes <br> - Update external links <br> - Use permanent 301 Redirects. <br><br>Best practices n°112 from '115 bonnes pratiques d'écoconception web v4'<br><br> See :<br> <a href='http://www.ecometer.org/rules/avoid-redirections.html' target='_blank'>Avoid redirections</a><br><a target='_blank' href='https://docs.wp-rocket.me/article/1388-avoid-multiple-page-redirects'>Avoid multiple page redirects</div>",
    "titleData": "{0} redirect in the whole project"
  },
  "optimizeBitmapImages": {
    "title": "Optimize bitmap images",
    "description": "You should optimize all your bitmap images.",
    "correction": "<div class='correction-text'>Optimizing bitmap images involves compressing and reducing the file size without compromising image quality significantly. Smaller image files consume less bandwidth, leading to faster load times and reduced data transfer, which is beneficial for users with limited internet access or on mobile devices. <br><br>The first step is to choose the correct format between bitmap (e.g., JPEG, PNG & GIF) and vector (SVG).<br><br>    Bitmaps should only be used for photos and interface elements that are not possible though icons or CSS styling.<br><br>The choice of bitmap format depends on the image’s characteristics: black and white or color, color palette, need for transparency, etc. For these characteristics, the ability to use lossy compression on the image is more suited to JPEG and WebP (Google); while the need for transparency and/or lossless compression is more suited to GIF or PNG.<br><br>Tools such as pngcrush, ImageMagick and jpegtran will help you reduce the size of images as much as possible.<br><br>Potential saving: At least 25% saved by fine-tuning the color palette and the compression ratio, and up to over 80% compared to a uncompressed bitmap. WebP is on average 30% smaller than JPEG.<br><br>Government Regulation: <br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/5.2/'> RGESN 5.2 Does the digital service offer image content whose level of compression is appropriate for the content and viewing context?</a><br><br>Best practices n°49 from 115 bonnes pratiques d'écoconception web v4<br><br> See : <br> <a target='_blank' href='http://www.ecometer.org/rules/optimize-bitmaps.html'>Optimize Bitmap images</a></div>",
    "titleData": "{0} bitmap image to optimize in the whole project"
  },
  "optimizeSvg": {
    "title": "Optimize svg images",
    "description": "All SVG images added into your web application should be optimized.",
    "correction": "<div class='correction-text'>SVG images are resolution-independent and can scale to any size without losing quality. By using SVG images, designers can create a single image asset that adapts to different screen sizes and resolutions. This eliminates the need for multiple image versions for various devices, reducing the number of resources needed and promoting a more efficient design. Svg images are less heavy than bitmap images, nevertheless they can be optimized and minified via tools (for example, svgo).<br><br>Government Regulation: <br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/5.2/'> RGESN 5.2 Does the digital service offer image content whose level of compression is appropriate for the content and viewing context?</a><br><br>Best practices n°49 from 115 bonnes pratiques d'écoconception web v4<br><br> See : <br> <a target='_blank' href='https://css-tricks.com/tools-for-optimizing-svg'> Tools for optimizing SVG</a></div>",
    "titleData": "{0} images to optimize in the whole project"
  },
  "plugins": {
    "title": "Do not use plugins",
    "description": "You should use no plugin in your web application if possible.",
    "correction": "<div class='correction-text'>Avoid using plugins (Flash Player, Java and Silverlight virtual machines, etc.) because they can be a heavy drain on resources (CPU and RAM).<br><br>This is especially true with Adobe’s Flash Player, to such an extent that Apple decided to not install the technology on its mobile devices to maximize battery life. Favor standard technology such as HTML5 and ECMAScript.<br><br>Government Regulation;<br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/4.5/'>RGESN 4.5 : Does the digital service allow users to decide on the activation of a third-party service?</a><br><br> See : <br><a target='_blank' href='http://www.ecometer.org/rules/limit-plugins.html'>Limit plugins</a>  </div>",
    "titleData": "{0} plugin found in the whole project"
  },
  "printStyleSheet": {
    "title": "Provide print stylesheet",
    "description": "Each of your pages should have at least one print style sheet to get an A Score.",
    "correction": "<div class='correction-text'>In addition to the benefits for the user, this style sheet reduces the number of pages printed, and therefore indirectly minimizes the website’s ecological footprint. It should be as streamlined as possible and employ an ink-light typeface e.g., Century Gothic. Also consider hiding the header, footer, menu and sidebar, as well as deleting all images except those needed for content. This print style sheet makes for a cleaner print by trimming down what is displayed on the screen.</div><div class=\"compliance-title\">Compliant :</div>      <div class=\"compliance-example\"> body { <br>   background-color : #fff;<br>font-family : Serif; <br> font-size:15pt; <br> } <br> #page { <br>  margin: 0; <br>  border: none; <br>  } <br>  #banner, #menuright, #footer { <br>  display: none; <br>  } <br>  h1#top { <br>  margin: 0; <br>  padding: 0; <br>  text-indent: 0; <br>  line-height: 25pt; <br>  font-size: 25pt;<br>   } (...)<br>     </div><div class='correction-text'> <br><br>Best practices n°31 from '115 bonnes pratiques d'écoconception web v4'<br><br> See :<br><a target='_blank' href='http://www.ecometer.org/rules/print-css.html'>Print Stylesheet</a><br><a target='_blank' href='https://www.sitepoint.com/css-printer-friendly-pages/'>CSS Printer Friendly Pages</a><br><a target='_blank' href='https://www.smashingmagazine.com/2011/11/how-to-set-up-a-print-style-sheet/'>How to set up a print stylesheet</a><br><a target='_blank' href='https://inviqa.com/blog/print-stylesheet-definitive-guide'>Print stylesheet guide</a></div>",
    "titleData": "{0} print stylesheet found in the whole project"
  },
  "socialNetworkButton": {
    "title": "Do not use standards social button",
    "description": "You should not use social media buttons.",
    "correction": "<div class='correction-text'>Social Network like Facebook, Twitter, Pinterest gives plugins to install on web page to get a share button and a like counter. These plugins consume unnecessary resources, it's better to put direct links.<br><br>Best practices n°59 from '115 bonnes pratiques d'écoconception web v4'</div>",
    "titleData": "{0} standard(s) social button(s) found in the whole project"
  },
  "styleSheets": {
    "title": "Limit Stylesheet files",
    "description": "You should have at most 2 stylesheets per page.",
    "correction": "<div class='correction-text'>Minimize the number of CSS files to reduce the number of HTTP requests. If several style sheets are used on all the website’s pages, concatenate them into one single file.<br><br>Some CMS and frameworks offer ways to do such optimization automatically. The HTTP server can also be configured to compress and reduce the size of style sheets.<br><br>With the Apache web server, simply add the following line in the .htaccess configuration file:<br># compress css:<br>AddOutputFilterByType DEFLATE text/css<br><br>This instruction activates the Deflate mode which compresses all the style sheets between the server and the HTTP client.<br><br><a target='_blank' href='http://httpd.apache.org/docs/2.4/mod/mod_deflate.html'>Learn more about Deflate</a><br><br>Government Regulation;<br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/6.2/'>RGESN 6.2 : Does the digital service adhere to a limit on the number of requests per screen? </a><br><br>Best practices n°35 from '115 bonnes pratiques d'écoconception web v4'</div>",
    "titleData": "{0} stylesheet(s) found on average"
  },
  "useETags": {
    "title": "Use ETags",
    "description": "ETags limit the number of server requests and avoid unnecessary use of bandwidth. At least 95 % of your resources should have ETags to have a B Score.",
    "correction": "<div class='correction-text'>An ETag is a signature attached to a server response. If the client requests a URL (HTML page, image, style sheet, etc.) whose ETag is identical to the one it already has, the web server will reply that it does not need to download the resource and that it should use the one it already possesses. Using ETags saves huge amounts of bandwidth.<br><br>Refer to the File Etag documentation for Apache:<br> <a target='_blank' href='http://httpd.apache.org/docs/2.0/mod/core.html#fileetag'>Apache documentation on Etag</a><br><br>Government Regulation;<br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/6.3/'>RGESN 6.3 : Does the digital service use caching mechanisms for all transferable content that it has control over?</a><br><br>See : <br><a target='_blank' href='https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag'> ETags </a><br><a target='_blank' href='http://www.ecometer.org/rules/etag-header.html'> Use ETags Header</a></div>",
    "titleData": "{0}% of resources with ETags "
  },
  "useStandardTypefaces": {
    "title": "Use Standard Typefaces",
    "description": "You should reduce the size of custom fonts used.",
    "correction": "<div class='correction-text'>Use standard typefaces as they already exist on the user’s computer, and therefore do not need to be downloaded. This saves bandwidth and improves the website’s render time.<br><br> When possible, use typefaces such as : <br><br> <ul>    <li>Courrier New</li>    <li>Georgia</li>    <li>Arial </li>    <li>Comic </li>    <li>Impact </li>    <li>Tahoma </li>    <li>Trebuchet MS </li>    <li>Times New Roman </li>    <li>Verdana </li>    <li>Segoe UI </li>    </ul><br><br>Government Regulation;<br><a target='_blank' href='https://ecoresponsable.numerique.gouv.fr/publications/referentiel-general-ecoconception/critere/4.10/'>RGESN 4.10 : Does the digital service mainly use fonts from the operating system?</a><br><br>Best practices n°32 from '115 bonnes pratiques d'écoconception web v4'<br><br> See : <br>     <a href='http://www.ecometer.org/rules/use-standard-typefaces.html' target='_blank'>Use standard typefaces</a><br/> <a href='http://en.wikipedia.org/wiki/List_of_typefaces_included_with_Mac_OS_X' target='_blank'> List of typeface included with MacOS X </a><br/> <a href='http://www.awayback.com/index.php/2010/02/03/revised-font-stack/' target='_blank'> Revised Font Stack</a></div>",
    "titleData": "{0} KB custom fonts found in the whole project"
  }
}