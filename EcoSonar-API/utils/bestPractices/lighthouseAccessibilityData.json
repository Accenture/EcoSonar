{
  "ariaAllowedAttr": {
    "title": "`[aria-*]` attributes match their roles",
    "description": "Lighthouse flags mismatches between ARIA roles and aria-* attributes.",
    "correction": "Each ARIA `role` supports a specific subset of `aria-*` attributes. Mismatching these invalidates the `aria-*` attributes. An ARIA role attribute can be added to an element to instruct assistive technologies to treat the element as something other than its native HTML element type. For example, an <  a  > element with role='button' is to be treated as a button, not a link.Some ARIA property and state attributes are allowed only for certain ARIA roles. When an assistive technology encounters a mismatch between an element's role and its state or property attributes, it might ignore attributes or respond in an unexpected way. As a result, people who use assistive technologies might find the element difficult or impossible to use. See : [aria-*] attributes do not match their roles aria-allowed-attr",
    "titleData": "{0} attribute(s) do not match their roles"
  },
  "ariaCommandName": {
    "title": "`button`, `link`, and `menuitem` elements have accessible names",
    "description": "Lighthouse flags custom ARIA items whose names aren't accessible to assistive technologies.",
    "correction": "When an element doesn't have an accessible name, screen readers announce it with a generic name, making it unusable for users who rely on screen readers. ARIA buttons, links, and menuitems are custom controls corresponding respectively to HTML <  button  >, <  a  >, and <  menuitem  > elements. An accessible name is a word or phrase coded in a way that assistive technologies can associate it with a specific user interface object. Assistive technologies can then refer to the object by name, not just by type. When an ARIA button, link, or menuitem doesn't an accessible name, people who use assistive technologies have no way of knowing its purpose. See :ARIA items do not have accessible names",
    "titleData": "{0} element(s) have no accessible name"
  },
  "ariaHiddenBody": {
    "title": "`[aria-hidden=\"true\"]` is not present on the document `<body>`",
    "description": "Lighthouse flags pages whose <body> element has an aria-hidden='true' attribute.",
    "correction": "Assistive technologies, like screen readers, work inconsistently when `aria-hidden='true'` is set on the document `<  body  >`. In some browsers, the attribute aria-hidden='true' hides an element and all its children from assistive technologies. Users can still use the keyboard to navigate to any focusable child elements in the <body>, but their content is inaccessible to people who use assistive technologies. For example, screen readers are silent. See :[aria-hidden='true'] is present on the document aria-hidden-body",
    "titleData": "{0} element(s) have an hidden body"
  },
  "ariaHiddenFocus": {
    "title": "`[aria-hidden=\"true\"]` elements do not contain focusable descendents",
    "description": "Lighthouse flags focusable elements that have parents with the aria-hidden='true' attribute.",
    "correction": "Focusable descendents within an `[aria-hidden='true']` element prevent those interactive elements from being available to users of assistive technologies like screen readers.  In some browsers, the attribute aria-hidden='true' hides an element and all its children from assistive technologies. Users can still use the keyboard to navigate to any focusable child elements, but their content is inaccessible to people who use assistive technologies. For example, screen readers are silent. (An element is focusable if it can receive input focus via scripting, mouse interaction, or keyboard tabbing.) See :[aria-hidden='true'] elements contain focusable descendants aria-hidden-focus",
    "titleData": "{0} element(s) contain focusable descendents"
  },
  "ariaRequiredAttr": {
    "title": "`[role]`s have all required `[aria-*]` attributes",
    "description": "Lighthouse flags ARIA roles that don't have the required states and properties.",
    "correction": " Some ARIA roles have required attributes that describe the state of the element to screen readers.  See : [role]s do not have all required [aria-*] attributes aria-required-attr",
    "titleData": "{0} element(s) have no required attribute"
  },
  "ariaRoles": {
    "title": "`[role]` values are valid",
    "description": "Lighthouse flags ARIA roles with invalid values.",
    "correction":"An ARIA role attribute can be added to an element to instruct assistive technologies to treat the element as something other than its native HTML element type. For example, an <  a  > element with role='button' will be treated as a button, not as a link.When an assistive technology encounters an element whose role attribute has an invalid value, it might ignore the element or respond to it in an unexpected way. As a result, people who use assistive technologies might find the element difficult or impossible to detect or use.See : [role] values are not valid aria-roles",
    "titleData": "{0} [role] value(s) are not valid"
  },
  "ariaValidAttrValue": {
    "title": "`[aria-*]` attributes have valid values",
    "description": "Lighthouse flags ARIA attributes with invalid values.",
    "correction": "When an assistive technology encounters an element with an invalid ARIA attribute value, it might ignore the attribute or respond to it in an unexpected way.As a result, people who use assistive technologies might find the element difficult or impossible to use.See : [aria-*] attributes do not have valid values aria-valid-attr-value",
    "titleData": "{0} [aria-*] attribute(s) are not valid"
  },
  "ariaValidAttr": {
    "title": "`[aria-*]` attributes are valid and not misspelled",
    "description": "Lighthouse flags invalid ARIA attributes.",
    "correction": "When an assistive technology encounters an element with an invalid ARIA attribute name, it might ignore the attribute or respond to it in an unexpected way. As a result, people who use assistive technologies might find the element difficult or impossible to use.See : [aria-*] attributes are not valid or misspelled aria-valid-attr",
    "titleData": "{0} [aria-*] attribute(s) are not valid or misspelled"
  },
  "bypass": {
    "title": "The page contains a heading, skip link, or landmark region",
    "description": "Lighthouse flags pages that don't provide a way to skip repetitive content.",
    "correction": "Web pages typically begin with blocks of content that repeat across multiple pages, such as banners and site navigation menus. A person who uses a mouse can visually skim past that repeated content and access a link or other control within the primary content with a single click.Similarly, a bypass mechanism allows keyboard users to navigate directly to the page's main content. Otherwise, reaching the primary content could require dozens of keystrokes. People with limited mobility could find this task difficult or painful, and people who use screen readers could find it tedious to listen as each repeated element is announced.See : The page does not contain a heading, skip link, or landmark region bypass",
    "titleData": "At least one of the page does not contain a heading, skip link or landmark region",
    "titleDataSuccess": "All pages contain a heading, skip line or landmark region"
  },
  "colorContrast": {
    "title": "Background and foreground colors don't have a sufficient contrast ratio.",
    "description": "Lighthouse flags text whose background and foreground colors don't have a sufficiently high contrast ratio.",
    "correction": "Most people find it easier to read text when it has a sufficiently high contrast against its background. People with visual disabilities, low vision, limited color perception, or presbyopia are likely to find text unreadable when contrast is too low.See : Background and foreground colors do not have a sufficient contrast ratio color-contrast",
    "titleData": "At least one page has background and foreground colors do not have a sufficient contrast ratio",
    "titleDataSuccess": "Background and foreground colors have a sufficient contrast ratio"
  },
  "documentTitle": {
    "title": "Document has a `<title>` element",
    "description": "Lighthouse flags pages without a <title> element in the page's <head>.",
    "correction": "Typically, the first thing a user learns about a web page is its title. The title is displayed in the browser tab and in search engine results, and it's announced by assistive technologies as soon as a user navigates to a page. A descriptive page title helps everyone, especially users of assistive technologies, determine whether a page contains information relevant to their current needs.See : Document doesn't have a title element document-title",
    "titleData": "{0} page(s) do not have a <title> element"
  },
  "duplicateIdActive": {
    "title": "`[id]` attributes on active, focusable elements are unique",
    "description": "Lighthouse flags focusable elements that have duplicate ids.",
    "correction": "When multiple active, focusable elements share the same id attribute, both scripting (such as JavaScript) and assistive technologies are likely to act only on the first and ignore the others. As a consequence, both functionality and accessibility can be degraded. (An element is focusable if it can receive input focus via scripting, mouse interaction, or keyboard tabbing. It's active if it is not marked as disabled.)See :[id] attributes on active, focusable elements are not unique duplicate-id-active",
    "titleData": "{0} [id] attribute(s) on active, focusable elements are not unique"
  },
  "duplicateIdAria": {
    "title": "ARIA IDs are unique",
    "description": "Lighthouse flags elements that share an ID referred to by another element's aria-labelledby attribute.",
    "correction": "Labels and ARIA relationship attributes (such as aria-controls, aria-labelledby, and aria-owns) depend on unique id values to identify specific UI components. When multiple elements in a web page share the same id value, assistive technologies are likely to recognize only the first, and ignore others.See : ARIA IDs are not unique duplicate-id-aria",
    "titleData": "{0} ARIA id(s) are not unique"
  },
  "headingOrder": {
    "title": "Heading elements appear in a sequentially-descending order",
    "description": "Lighthouse flags pages whose headings skip one or more levels.",
    "correction": "Properly ordered headings that do not skip levels convey the semantic structure of the page, making it easier to navigate and understand when using assistive technologies. See : Heading elements are not in a sequentially-descending order",
    "titleData": "{0} heading element(s) are not in a sequentially-descending order"
  },
  "htmlHasLang": {
    "title": "`<html>` element has a `[lang]` attribute",
    "description": "Lighthouse flags pages whose <html> element doesn't have a lang attribute.",
    "correction": "When a web page's primary language is programmatically identified, browsers and assistive technologies can render the text more accurately; screen readers can use the correct pronunciation; visual browsers can display the correct characters; media players can show captions correctly; and automated translation is enabled.All users find it easier to understand the page's content.See : <html> element does not have a [lang] attribute html-has-lang",
    "titleData": "{0} <html> element(s) does not have a [lang] attribute"
  },
  "htmlLangValid": {
    "title": "`<html>` element has a valid value for its `[lang]` attribute",
    "description": "Lighthouse flags pages whose <html> element doesn't have a valid value for its lang attribute.",
    "correction": "When a web page's primary language is programmatically identified, browsers and assistive technologies can render the text more accurately; screen readers can use the correct pronunciation; visual browsers can display the correct characters; media players can show captions correctly; and automated translation is enabled.All users find it easier to understand the page's content.See :<html> element does not have a valid value for its [lang] attribute html-lang-valid",
    "titleData": "{0} <html> element(s) does not have a valid value for its [lang] attribute"
  },
  "imageAlt": {
    "title": "Image elements have `[alt]` attributes",
    "description": "Lighthouse flags <img> elements that don't have alt attributes.",
    "correction": "Because assistive technologies can't interpret an image directly, they rely on alternative text to communicate the image's meaning to users. If an image has (non-empty) alternative text, the image is identified as meaningful, and its alternative text is presented to the user. If an image has an empty alt attribute, the image is identified as decorative and ignored. If an image has no alternative text at all, the image is presumed to be meaningful, and its filename is likely to be presented to the user.See : Image elements do not have [alt] attributes image-alt",
    "titleData": "{0} image element(s) do not have [alt] attributes"
  },
  "label": {
    "title": "Form elements have associated labels",
    "description": "Lighthouse flags form elements that don't have associated labels.",
    "correction": "A form control is an interactive HTML element used for user input. Form controls include buttons, checkboxes, text fields, color pickers, and more.An accessible name is a word or phrase coded in a way that assistive technologies can associate it with a specific user interface object. Assistive technologies can then refer to the object by its name, not just by type (role).When a form control doesn't have an accessible name, people who use assistive technologies have no way of knowing its specific purpose.See : Form elements do not have associated labels label",
    "titleData": "{0} element(s) have no associated labels"
  },
  "linkName": {
    "title": "Links have a discernible name",
    "description": "Lighthouse flags links that don't have discernible names.",
    "correction": "An accessible name is a word or phrase coded in a way that assistive technologies can associate it with a specific user interface object. Assistive technologies can then refer to the object by name, not just by type. When a link doesn't have an accessible name, people who use assistive technologies have no way of knowing its purpose.See : Links do not have a discernible name link-name",
    "titleData": "{0} link(s) do not have a discernible name"
  },
  "list": {
    "title": "Lists contain only `<li>` elements and script supporting elements",
    "description": "Lighthouse flags lists that contain content elements that shouldn't be in a list.",
    "correction": "In a properly structured list, all content is contained within list items. Content includes text and other HTML elements. Certain non-content elements are also allowed.When an assistive technology encounters a list that's poorly structured or contains disallowed elements, it might respond in an unexpected way. As a result, people who use assistive technologies might find it difficult to interpret the list.See : Lists do not contain only <  li  > elements and script supporting elements (<  script  > and <  template  >) list",
    "titleData": "{0} list(s) do not contain only <li> elements and script supporting elemnts (<script> and <template>) "
  },
  "listItem": {
    "title": "List items (`<li>`) are contained within `<ul>` or `<ol>` parent elements",
    "description": "Lighthouse flags list items (<li>) that aren't contained in <ul> or <ol> parent elements.",
    "correction": "In a properly structured list, all list items (<  li  > elements) are contained by a <  ul  >, <  ol  >, or <  menu  > parent element.When an assistive technology encounters a list that's poorly structured, it might respond in an unexpected way. As a result, people who use assistive technologies might find it difficult to interpret the list. See : List items (<  li  >) are not contained within <  ul  > or <  ol  > parent elements listitem",
    "titleData": "{0} List item(s) <li> are not contained within <ul> or <ol> parent elements"
  },
  "tabIndex": {
    "title": "No element has a `[tabindex]` value greater than 0",
    "description": "Lighthouse flags elements that have a tabindex value greater than 0.",
    "correction": "A value greater than 0 implies an explicit navigation ordering. Although technically valid, this often creates frustrating experiences for users who rely on assistive technologies. See : Some elements have a [tabindex] value greater than 0",
    "titleData": "{0} element(s) have a [tabindex] value greater than 0"
  },
  "tdHeadersAttr": {
    "title": "Td Headers Attributes",
    "description": "Lighthouse flags tables that have more than one table header per column.",
    "correction": "In a table, a header cell and a data cell are programmatically related if they are coded in a way that assistive technologies can accurately determine their relationship. When a data cell has a headers attribute that points to a cell in a different table, the programmatic relationship isn't defined in a way that assistive technologies can recognize. As a result, assistive technology users can't tell which header cell goes with a given data cell.See : Cells in a <  table  > element that use the [headers] attribute refer to an element ID not found within the same table td-headers-attr",
    "titleData": "{0} cell(s) in a <table> element that use the [headers] attribute refer to an element id not found within the same table"
  },
  "validLang": {
    "title": "[lang] attributes have a valid value",
    "description": "Lighthouse flags elements that have a lang attribute with an invalid value.",
    "correction": "Sometimes a web page written in one language has a passage in a different language. When the language of such a passage is correctly identified (by a lang attribute on the containing element), browsers and assistive technologies can render the text more accurately; screen readers can use the correct pronunciation; visual browsers can display the correct characters; and media players can show captions correctly. All users find it easier to understand the content.See : [lang] attributes do not have a valid value valid-lang",
    "titleData": "{0} element(s) do not have valid lang attribute"
  },
  "ariaInputFieldName": {
    "title": "ARIA input fields have accessible names",
    "description": "Lighthouse flags custom ARIA items whose names aren't accessible to assistive technologies.",
    "correction": "When an input field doesn't have an accessible name, screen readers announce it with a generic name, making it unusable for users who rely on screen readers. See : ARIA items do not have accessible names aria-input-field-name",
    "titleData": "{0} ARIA input field(s) do not have accessible names"
  },
  "ariaMeterName": {
    "title": "ARIA `meter` elements have accessible names",
    "description": "Lighthouse flags custom ARIA items whose names aren't accessible to assistive technologies",
    "correction": "When an element doesn't have an accessible name, screen readers announce it with a generic name, making it unusable for users who rely on screen readers. An ARIA meter is a custom control corresponding to the HTML <  meter  > element. A meter represents either a scalar value within a known range, or a fractional value. For example, a meter might represent the unused portion of total storage capacity. An accessible name is a word or phrase coded in a way that assistive technologies can associate it with a specific user interface object. Assistive technologies can then refer to the object by name, not just by type. When an ARIA meter doesn't an accessible name, people who use assistive technologies have no way of knowing its purpose.See : ARIA items do not have accessible names aria-meter-name",
    "titleData": "{0} ARIA meter element(s) do not have accessible names"
  },
  "ariaProgressbarName": {
    "title": "ARIA `progressbar` elements have accessible names",
    "description": "Lighthouse flags custom ARIA items whose names aren't accessible to assistive technologies",
    "correction": "When a `progressbar` element doesn't have an accessible name, screen readers announce it with a generic name, making it unusable for users who rely on screen readers. An ARIA progressbar is a custom control corresponding to the HTML <  progress  > element. A progressbar represents progress on a task that takes a long time to complete. An accessible name is a word or phrase coded in a way that assistive technologies can associate it with a specific user interface object. Assistive technologies can then refer to the object by name, not just by type. When an ARIA progressbar doesn't an accessible name, people who use assistive technologies have no way of knowing its purpose. See : ARIA items do not have accessible names aria-progress-bar-name",
    "titleData": "{0} ARIA progressbar element(s) do not have accessible names"
  },
  "ariaRequiredChildren": {
    "title": "ARIA Required children",
    "description": "Lighthouse flags ARIA roles that don't have the required child roles.",
    "correction": "An ARIA role attribute can be added to an element to instruct assistive technologies to treat the element as something other than its native HTML element type. For example, a <  ul  > element with role='listbox' is to be treated as a listbox control, not as a static list.Some ARIA 'parent' roles identify composite controls that always include managed controls, identified by 'child' roles. For example, role='listbox' identifies a composite control that manages a set of managed controls identified by role='option'. People who use assistive technologies might find it difficult or impossible to use a composite control if its managed controls lack the required child role. See : Elements with an ARIA [role] that require children to contain a specific [role] are missing some or all of those required children aria-required-children",
    "titleData": "{0} element(s) have missing child roles"
  },
  "ariaRequiredParent": {
    "title": "`[role]`s are contained by their required parent element",
    "description": "Lighthouse flags ARIA child roles that aren't contained by the required parent",
    "correction": "An ARIA role attribute can be added to an element to instruct assistive technologies to treat the element as something other than its native HTML element type. For example, an <  li  > element with role='option' is to be treated as a selectable option in a listbox control, not as a static list item.Some ARIA 'child' roles identify managed controls that are always part of a larger composite control, identified by a 'parent' role. For example, role='option' identifies a child control that is managed by a parent control identified by role='listbox'. People who use assistive technologies might find it difficult or impossible to use a child control if its managing control lacks the required parent role.See : [role]s are not contained by their required parent element aria-required-parent",
    "titleData": "{0} element(s) have missing parent roles"
  },
  "ariaToggleFieldName": {
    "title": "ARIA toggle fields have accessible names",
    "description": "Lighthouse flags custom ARIA items whose names aren't accessible to assistive technologies.",
    "correction": "When a toggle field doesn't have an accessible name, screen readers announce it with a generic name, making it unusable for users who rely on screen readers. See :ARIA items do not have accessible names aria-toggle-field-name",
    "titleData": "Not all ARIA toggle fields have accessible names",
    "titleDataSuccess": "ARIA toggle fields have accessible names"
  },
  "ariaTooltipName": {
    "title": "ARIA `tooltip` elements have accessible names",
    "description": "Lighthouse flags custom ARIA items whose names aren't accessible to assistive technologies.",
    "correction": "An ARIA tooltip is a contextual popup with text describing an interface element. The tooltip typically becomes visible when the mouse hovers over, or focus is received by, the owning element. An accessible name is a word or phrase coded in a way that assistive technologies can associate it with a specific user interface object. Assistive technologies can then refer to the object by name, not just by type. When an ARIA tooltip doesn't an accessible name, people who use assistive technologies have no way of knowing its purpose.See : ARIA items do not have accessible names aria-tooltip-name",
    "titleData": "Not all ARIA tooltip elements have accessible names",
    "titleDataSuccess": "ARIA tooltip elements have accessible names"
  },
  "ariaTreeitemName": {
    "title": "ARIA `treeitem` elements have accessible names",
    "description": "Lighthouse flags custom ARIA items whose names aren't accessible to assistive technologies.",
    "correction": "When an element doesn't have an accessible name, screen readers announce it with a generic name, making it unusable for users who rely on screen readers.See : ARIA items do not have accessible names",
    "titleData": "Not all ARIA treeitem elements have accessible names",
    "titleDataSuccess": "ARIA treeitem elements have accessible names"
  },
  "buttonName": {
    "title": "Buttons have an accessible name",
    "description": "Lighthouse flags buttons that don't have text content or an aria-label property.",
    "correction": "An accessible name is a word or phrase coded in a way that assistive technologies can associate it with a specific user interface object. Assistive technologies can then refer to the object by name, not just by type. When a button doesn't have an accessible name, people who use assistive technologies have no way of knowing its purpose.See : Buttons do not have an accessible name button-name",
    "titleData": "{0} button(s) do not have an accessible name"
  },
  "definitionList": {
    "title": "Definition List",
    "description": "Lighthouse flags <dl> elements that don't contain properly ordered <dt> and <dd> groups, <script>, or <template> elements.",
    "correction": "A definition list is a list of terms (words or phrases), and their definitions. A definition list can contain only certain element types, and it requires a specific structure.When an assistive technology encounters a definition list that's poorly structured or contains invalid elements, it might respond in an unexpected way. As a result, people who use assistive technologies might find it difficult to interpret the list.See : < dl > do not contain only properly ordered <  dt  > and <  dd  > groups, <  script  >, or <  template  > elements definition-list",
    "titleData": " {0} `<dl>`'s don't contain only properly-ordered `<dt>` and `<dd>` groups, `<script>`, `<template>` or `<div>` elements "
  },
  "dlItem": {
    "title": "Definition list items are wrapped in `<dl>` elements",
    "description": "Lighthouse reports when definition list items are not wrapped in <dl> elements.",
    "correction": "A definition list is a list of terms (words or phrases), and their definitions. The <  dt  > and <  dd  > elements must be contained by a <  dl  > element.When an assistive technology encounters a definition list that's poorly structured, it might respond in an unexpected way. As a result, people who use assistive technologies might find it difficult to interpret the list.See :Definition list items are not wrapped in <  dl  > elements dlitem",
    "titleData": "{0} definition list item(s) are not wrapped in <dl> elements"
  },
  "formFieldMultipleLabels": {
    "title": "No form fields have multiple labels",
    "description": "Lighthouse flags form elements that have more than one label.",
    "correction": "Form fields with multiple labels can be confusingly announced by assistive technologies like screen readers which use either the first, the last, or all of the labels. See : Form fields have multiple labels",
    "titleData": "{0} Form Field(s) have multiple labels"
  },
  "frameTitle": {
    "title": "`<frame>` or `<iframe>` elements have a title",
    "description": "Lighthouse flags <frame> and <iframe> elements that don't have titles.",
    "correction": "A <  frame  > or <  iframe  > is used to embed one HTML document within another. An accessible name is a word or phrase coded in a way that assistive technologies can associate it with a specific user interface object. Assistive technologies can then refer to the object by name, not just by type.People with good vision can glance at a <  frame  > or <  iframe  > element to get a good idea of its content. People who use assistive technologies rely on the frame's accessible name to determine whether it contains information relevant to their current needs.See :<  frame  > or <  iframe  > elements do not have a title frame-title",
    "titleData": "{0} <frame> or <iframe> element(s) do not have a title"
  },
  "inputImageAlt": {
    "title": "`<input type=\"image\">` elements have `[alt]` text",
    "description": "Lighthouse flags < input type='image' > elements that don't have alt text",
    "correction": "An image button is an <  input  > element with type='image'. Alternative text is a word or phrase that (1) is coded in a way that assistive technologies can associate it with a specific non-text object, and (2) conveys the same information as the non-text object.Because assistive technologies can't interpret an image directly, they rely on alternative text to communicate the image button's purpose. When an image button doesn't have alternative text, people who use assistive technologies have no way of knowing its purpose.See :<  input type='image'  > elements do not have [alt] text input-image-alt",
    "titleData": "{0} < input type='image' > element(s) do not have [alt] text"
  },
  "metaRefresh": {
    "title": "The document does not use `<meta http-equiv=\"refresh\">`",
    "description": "Lighthouse flags pages that contain a <meta> tag with the http-equiv='refresh' attribute.",
    "correction": "Using http-equiv='refresh' in a <  meta  > element causes a web page to refresh automatically at a specified time interval.An automatic page refresh can be disorienting. If a refresh causes input focus to move unexpectedly back to its original state, it can be especially frustrating for people who use screen readers and other keyboard users.See : The document uses <  meta http-equiv='refresh'  > meta-refresh",
    "titleData": "At least one document uses <meta http-equiv='refresh'>",
    "titleDataSuccess": "All documents do not use <meta http-equiv='refresh'>"
  },
  "metaViewport": {
    "title": "Meta Viewport",
    "description": "Lighthouse flags pages that disable browser zooming.",
    "correction": "Using content='user-scalable=no' in a <  meta name='viewport'  > element disables zooming in some browsers. Users are forced to view the text at the specified size.Most people find it easier to read text when it is sufficiently large. People with visual disabilities, low vision, or limited color perception are likely to find text unreadable when it's too small.See : [user-scalable='no'] is used in the <  meta name='viewport'  > element or the [maximum-scale] attribute is less than 5 meta-viewport",
    "titleData": "{0} `[user-scalable=\"no\"]` is used in the `<meta name=\"viewport\">` element and the `[maximum-scale]` attribute is not less than 5. "
  },
  "objectAlt": {
    "title": "`<object>` elements have `[alt]` text",
    "description": "Lighthouse flags <object> elements that don't have alternative text.",
    "correction": "An <  object  > element is used to embed multimedia content in a web page. It can also be used to embed one web page inside another.Alternative text is a word or phrase that (1) is coded in a way that assistive technologies can associate it with a specific non-text object, and (2) conveys the same information as the non-text object.Because assistive technologies can't interpret objects directly, they rely on alternative text to communicate the meaning of non-text content to users.See : <  object  > elements do not have alt text object-alt",
    "titleData": "{0} <object> element(s) do not have [alt] text"
  },
  "thHasDataCells": {
    "title": "<th> elements have data cells they describe.",
    "description": "Lighthouse flags <th> elements and elements with [role='columnheader'/'rowheader'] that don't have the data cells they describe.",
    "correction": "When people with good vision see a table with a row or column header that has no associated data cells, they can tell at a glance that the data is missing. People who use assistive technologies must explore a table deliberately to discover its contents; they are likely to have difficulty interpreting a table with missing data cells.See : <  th  > elements and elements with [role='columnheader'/'rowheader'] do not have data cells they describe th-has-data-cells",
    "titleData": "{0} <th> elements and elements with [role='columnheader'/'rowheader']  do not have the data cells they describe"
  },
  "videoCaption": {
    "title": "Video Caption",
    "description": "Lighthouse flags <video> elements that are missing a <track> element with the attribute kind='captions'.",
    "correction": "When a video provides a caption it is easier for deaf and hearing impaired users to access its information. See :<   video   > elements do not contain a <   track   > element with [kind=\"captions\"]",
    "titleData": "{0} <video> element(s) have missing <track> element with the attribute kind='captions'"
  },
  "accessKeys": {
    "title": "`[accesskey]` values are unique",
    "description": "Lighthouse flags pages with duplicate access keys.",
    "correction": "Access keys let users quickly focus a part of the page. For proper navigation, each access key must be unique.  See :[accesskey] values are not unique",
    "titleData": "{0} value(s) are not unique"
  }
}